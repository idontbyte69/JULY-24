"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/resend";
exports.ids = ["vendor-chunks/resend"];
exports.modules = {

/***/ "(rsc)/./node_modules/resend/dist/index.mjs":
/*!********************************************!*\
  !*** ./node_modules/resend/dist/index.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Resend: () => (/* binding */ Resend)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// package.json\nvar version = \"4.5.0\";\n// src/api-keys/api-keys.ts\nvar ApiKeys = class {\n    constructor(resend){\n        this.resend = resend;\n    }\n    create(_0) {\n        return __async(this, arguments, function*(payload, options = {}) {\n            const data = yield this.resend.post(\"/api-keys\", payload, options);\n            return data;\n        });\n    }\n    list() {\n        return __async(this, null, function*() {\n            const data = yield this.resend.get(\"/api-keys\");\n            return data;\n        });\n    }\n    remove(id) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.delete(`/api-keys/${id}`);\n            return data;\n        });\n    }\n};\n// src/audiences/audiences.ts\nvar Audiences = class {\n    constructor(resend){\n        this.resend = resend;\n    }\n    create(_0) {\n        return __async(this, arguments, function*(payload, options = {}) {\n            const data = yield this.resend.post(\"/audiences\", payload, options);\n            return data;\n        });\n    }\n    list() {\n        return __async(this, null, function*() {\n            const data = yield this.resend.get(\"/audiences\");\n            return data;\n        });\n    }\n    get(id) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.get(`/audiences/${id}`);\n            return data;\n        });\n    }\n    remove(id) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.delete(`/audiences/${id}`);\n            return data;\n        });\n    }\n};\n// src/common/utils/parse-email-to-api-options.ts\nfunction parseEmailToApiOptions(email) {\n    return {\n        attachments: email.attachments,\n        bcc: email.bcc,\n        cc: email.cc,\n        from: email.from,\n        headers: email.headers,\n        html: email.html,\n        reply_to: email.replyTo,\n        scheduled_at: email.scheduledAt,\n        subject: email.subject,\n        tags: email.tags,\n        text: email.text,\n        to: email.to\n    };\n}\n// src/batch/batch.ts\nvar Batch = class {\n    constructor(resend){\n        this.resend = resend;\n    }\n    send(_0) {\n        return __async(this, arguments, function*(payload, options = {}) {\n            return this.create(payload, options);\n        });\n    }\n    create(_0) {\n        return __async(this, arguments, function*(payload, options = {}) {\n            const emails = [];\n            for (const email of payload){\n                if (email.react) {\n                    if (!this.renderAsync) {\n                        try {\n                            const { renderAsync } = yield Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/next\"), __webpack_require__.e(\"vendor-chunks/entities\"), __webpack_require__.e(\"vendor-chunks/domutils\"), __webpack_require__.e(\"vendor-chunks/htmlparser2\"), __webpack_require__.e(\"vendor-chunks/peberminta\"), __webpack_require__.e(\"vendor-chunks/domhandler\"), __webpack_require__.e(\"vendor-chunks/dom-serializer\"), __webpack_require__.e(\"vendor-chunks/selderee\"), __webpack_require__.e(\"vendor-chunks/parseley\"), __webpack_require__.e(\"vendor-chunks/leac\"), __webpack_require__.e(\"vendor-chunks/html-to-text\"), __webpack_require__.e(\"vendor-chunks/domelementtype\"), __webpack_require__.e(\"vendor-chunks/@selderee\"), __webpack_require__.e(\"vendor-chunks/@react-email\"), __webpack_require__.e(\"vendor-chunks/deepmerge\")]).then(__webpack_require__.bind(__webpack_require__, /*! @react-email/render */ \"(rsc)/./node_modules/@react-email/render/dist/node/index.mjs\"));\n                            this.renderAsync = renderAsync;\n                        } catch (error) {\n                            throw new Error(\"Failed to render React component. Make sure to install `@react-email/render`\");\n                        }\n                    }\n                    email.html = yield this.renderAsync(email.react);\n                    email.react = void 0;\n                }\n                emails.push(parseEmailToApiOptions(email));\n            }\n            const data = yield this.resend.post(\"/emails/batch\", emails, options);\n            return data;\n        });\n    }\n};\n// src/broadcasts/broadcasts.ts\nvar Broadcasts = class {\n    constructor(resend){\n        this.resend = resend;\n    }\n    create(_0) {\n        return __async(this, arguments, function*(payload, options = {}) {\n            if (payload.react) {\n                if (!this.renderAsync) {\n                    try {\n                        const { renderAsync } = yield Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/next\"), __webpack_require__.e(\"vendor-chunks/entities\"), __webpack_require__.e(\"vendor-chunks/domutils\"), __webpack_require__.e(\"vendor-chunks/htmlparser2\"), __webpack_require__.e(\"vendor-chunks/peberminta\"), __webpack_require__.e(\"vendor-chunks/domhandler\"), __webpack_require__.e(\"vendor-chunks/dom-serializer\"), __webpack_require__.e(\"vendor-chunks/selderee\"), __webpack_require__.e(\"vendor-chunks/parseley\"), __webpack_require__.e(\"vendor-chunks/leac\"), __webpack_require__.e(\"vendor-chunks/html-to-text\"), __webpack_require__.e(\"vendor-chunks/domelementtype\"), __webpack_require__.e(\"vendor-chunks/@selderee\"), __webpack_require__.e(\"vendor-chunks/@react-email\"), __webpack_require__.e(\"vendor-chunks/deepmerge\")]).then(__webpack_require__.bind(__webpack_require__, /*! @react-email/render */ \"(rsc)/./node_modules/@react-email/render/dist/node/index.mjs\"));\n                        this.renderAsync = renderAsync;\n                    } catch (error) {\n                        throw new Error(\"Failed to render React component. Make sure to install `@react-email/render`\");\n                    }\n                }\n                payload.html = yield this.renderAsync(payload.react);\n            }\n            const data = yield this.resend.post(\"/broadcasts\", {\n                name: payload.name,\n                audience_id: payload.audienceId,\n                preview_text: payload.previewText,\n                from: payload.from,\n                html: payload.html,\n                reply_to: payload.replyTo,\n                subject: payload.subject,\n                text: payload.text\n            }, options);\n            return data;\n        });\n    }\n    send(id, payload) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.post(`/broadcasts/${id}/send`, {\n                scheduled_at: payload == null ? void 0 : payload.scheduledAt\n            });\n            return data;\n        });\n    }\n    list() {\n        return __async(this, null, function*() {\n            const data = yield this.resend.get(\"/broadcasts\");\n            return data;\n        });\n    }\n    get(id) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.get(`/broadcasts/${id}`);\n            return data;\n        });\n    }\n    remove(id) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.delete(`/broadcasts/${id}`);\n            return data;\n        });\n    }\n    update(id, payload) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.patch(`/broadcasts/${id}`, {\n                name: payload.name,\n                audience_id: payload.audienceId,\n                from: payload.from,\n                html: payload.html,\n                text: payload.text,\n                subject: payload.subject,\n                reply_to: payload.replyTo,\n                preview_text: payload.previewText\n            });\n            return data;\n        });\n    }\n};\n// src/contacts/contacts.ts\nvar Contacts = class {\n    constructor(resend){\n        this.resend = resend;\n    }\n    create(_0) {\n        return __async(this, arguments, function*(payload, options = {}) {\n            const data = yield this.resend.post(`/audiences/${payload.audienceId}/contacts`, {\n                unsubscribed: payload.unsubscribed,\n                email: payload.email,\n                first_name: payload.firstName,\n                last_name: payload.lastName\n            }, options);\n            return data;\n        });\n    }\n    list(options) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.get(`/audiences/${options.audienceId}/contacts`);\n            return data;\n        });\n    }\n    get(options) {\n        return __async(this, null, function*() {\n            if (!options.id && !options.email) {\n                return {\n                    data: null,\n                    error: {\n                        message: \"Missing `id` or `email` field.\",\n                        name: \"missing_required_field\"\n                    }\n                };\n            }\n            const data = yield this.resend.get(`/audiences/${options.audienceId}/contacts/${(options == null ? void 0 : options.email) ? options == null ? void 0 : options.email : options == null ? void 0 : options.id}`);\n            return data;\n        });\n    }\n    update(payload) {\n        return __async(this, null, function*() {\n            if (!payload.id && !payload.email) {\n                return {\n                    data: null,\n                    error: {\n                        message: \"Missing `id` or `email` field.\",\n                        name: \"missing_required_field\"\n                    }\n                };\n            }\n            const data = yield this.resend.patch(`/audiences/${payload.audienceId}/contacts/${(payload == null ? void 0 : payload.email) ? payload == null ? void 0 : payload.email : payload == null ? void 0 : payload.id}`, {\n                unsubscribed: payload.unsubscribed,\n                first_name: payload.firstName,\n                last_name: payload.lastName\n            });\n            return data;\n        });\n    }\n    remove(payload) {\n        return __async(this, null, function*() {\n            if (!payload.id && !payload.email) {\n                return {\n                    data: null,\n                    error: {\n                        message: \"Missing `id` or `email` field.\",\n                        name: \"missing_required_field\"\n                    }\n                };\n            }\n            const data = yield this.resend.delete(`/audiences/${payload.audienceId}/contacts/${(payload == null ? void 0 : payload.email) ? payload == null ? void 0 : payload.email : payload == null ? void 0 : payload.id}`);\n            return data;\n        });\n    }\n};\n// src/common/utils/parse-domain-to-api-options.ts\nfunction parseDomainToApiOptions(domain) {\n    return {\n        name: domain.name,\n        region: domain.region,\n        custom_return_path: domain.customReturnPath\n    };\n}\n// src/domains/domains.ts\nvar Domains = class {\n    constructor(resend){\n        this.resend = resend;\n    }\n    create(_0) {\n        return __async(this, arguments, function*(payload, options = {}) {\n            const data = yield this.resend.post(\"/domains\", parseDomainToApiOptions(payload), options);\n            return data;\n        });\n    }\n    list() {\n        return __async(this, null, function*() {\n            const data = yield this.resend.get(\"/domains\");\n            return data;\n        });\n    }\n    get(id) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.get(`/domains/${id}`);\n            return data;\n        });\n    }\n    update(payload) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.patch(`/domains/${payload.id}`, {\n                click_tracking: payload.clickTracking,\n                open_tracking: payload.openTracking,\n                tls: payload.tls\n            });\n            return data;\n        });\n    }\n    remove(id) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.delete(`/domains/${id}`);\n            return data;\n        });\n    }\n    verify(id) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.post(`/domains/${id}/verify`);\n            return data;\n        });\n    }\n};\n// src/emails/emails.ts\nvar Emails = class {\n    constructor(resend){\n        this.resend = resend;\n    }\n    send(_0) {\n        return __async(this, arguments, function*(payload, options = {}) {\n            return this.create(payload, options);\n        });\n    }\n    create(_0) {\n        return __async(this, arguments, function*(payload, options = {}) {\n            if (payload.react) {\n                if (!this.renderAsync) {\n                    try {\n                        const { renderAsync } = yield Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/next\"), __webpack_require__.e(\"vendor-chunks/entities\"), __webpack_require__.e(\"vendor-chunks/domutils\"), __webpack_require__.e(\"vendor-chunks/htmlparser2\"), __webpack_require__.e(\"vendor-chunks/peberminta\"), __webpack_require__.e(\"vendor-chunks/domhandler\"), __webpack_require__.e(\"vendor-chunks/dom-serializer\"), __webpack_require__.e(\"vendor-chunks/selderee\"), __webpack_require__.e(\"vendor-chunks/parseley\"), __webpack_require__.e(\"vendor-chunks/leac\"), __webpack_require__.e(\"vendor-chunks/html-to-text\"), __webpack_require__.e(\"vendor-chunks/domelementtype\"), __webpack_require__.e(\"vendor-chunks/@selderee\"), __webpack_require__.e(\"vendor-chunks/@react-email\"), __webpack_require__.e(\"vendor-chunks/deepmerge\")]).then(__webpack_require__.bind(__webpack_require__, /*! @react-email/render */ \"(rsc)/./node_modules/@react-email/render/dist/node/index.mjs\"));\n                        this.renderAsync = renderAsync;\n                    } catch (error) {\n                        throw new Error(\"Failed to render React component. Make sure to install `@react-email/render`\");\n                    }\n                }\n                payload.html = yield this.renderAsync(payload.react);\n            }\n            const data = yield this.resend.post(\"/emails\", parseEmailToApiOptions(payload), options);\n            return data;\n        });\n    }\n    get(id) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.get(`/emails/${id}`);\n            return data;\n        });\n    }\n    update(payload) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.patch(`/emails/${payload.id}`, {\n                scheduled_at: payload.scheduledAt\n            });\n            return data;\n        });\n    }\n    cancel(id) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.post(`/emails/${id}/cancel`);\n            return data;\n        });\n    }\n};\n// src/resend.ts\nvar defaultBaseUrl = \"https://api.resend.com\";\nvar defaultUserAgent = `resend-node:${version}`;\nvar baseUrl = typeof process !== \"undefined\" && process.env ? process.env.RESEND_BASE_URL || defaultBaseUrl : defaultBaseUrl;\nvar userAgent = typeof process !== \"undefined\" && process.env ? process.env.RESEND_USER_AGENT || defaultUserAgent : defaultUserAgent;\nvar Resend = class {\n    constructor(key){\n        this.key = key;\n        this.apiKeys = new ApiKeys(this);\n        this.audiences = new Audiences(this);\n        this.batch = new Batch(this);\n        this.broadcasts = new Broadcasts(this);\n        this.contacts = new Contacts(this);\n        this.domains = new Domains(this);\n        this.emails = new Emails(this);\n        if (!key) {\n            if (typeof process !== \"undefined\" && process.env) {\n                this.key = process.env.RESEND_API_KEY;\n            }\n            if (!this.key) {\n                throw new Error('Missing API key. Pass it to the constructor `new Resend(\"re_123\")`');\n            }\n        }\n        this.headers = new Headers({\n            Authorization: `Bearer ${this.key}`,\n            \"User-Agent\": userAgent,\n            \"Content-Type\": \"application/json\"\n        });\n    }\n    fetchRequest(_0) {\n        return __async(this, arguments, function*(path, options = {}) {\n            try {\n                const response = yield fetch(`${baseUrl}${path}`, options);\n                if (!response.ok) {\n                    try {\n                        const rawError = yield response.text();\n                        return {\n                            data: null,\n                            error: JSON.parse(rawError)\n                        };\n                    } catch (err) {\n                        if (err instanceof SyntaxError) {\n                            return {\n                                data: null,\n                                error: {\n                                    name: \"application_error\",\n                                    message: \"Internal server error. We are unable to process your request right now, please try again later.\"\n                                }\n                            };\n                        }\n                        const error = {\n                            message: response.statusText,\n                            name: \"application_error\"\n                        };\n                        if (err instanceof Error) {\n                            return {\n                                data: null,\n                                error: __spreadProps(__spreadValues({}, error), {\n                                    message: err.message\n                                })\n                            };\n                        }\n                        return {\n                            data: null,\n                            error\n                        };\n                    }\n                }\n                const data = yield response.json();\n                return {\n                    data,\n                    error: null\n                };\n            } catch (error) {\n                return {\n                    data: null,\n                    error: {\n                        name: \"application_error\",\n                        message: \"Unable to fetch data. The request could not be resolved.\"\n                    }\n                };\n            }\n        });\n    }\n    post(_0, _1) {\n        return __async(this, arguments, function*(path, entity, options = {}) {\n            const headers = new Headers(this.headers);\n            if (options.idempotencyKey) {\n                headers.set(\"Idempotency-Key\", options.idempotencyKey);\n            }\n            const requestOptions = __spreadValues({\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(entity)\n            }, options);\n            return this.fetchRequest(path, requestOptions);\n        });\n    }\n    get(_0) {\n        return __async(this, arguments, function*(path, options = {}) {\n            const requestOptions = __spreadValues({\n                method: \"GET\",\n                headers: this.headers\n            }, options);\n            return this.fetchRequest(path, requestOptions);\n        });\n    }\n    put(_0, _1) {\n        return __async(this, arguments, function*(path, entity, options = {}) {\n            const requestOptions = __spreadValues({\n                method: \"PUT\",\n                headers: this.headers,\n                body: JSON.stringify(entity)\n            }, options);\n            return this.fetchRequest(path, requestOptions);\n        });\n    }\n    patch(_0, _1) {\n        return __async(this, arguments, function*(path, entity, options = {}) {\n            const requestOptions = __spreadValues({\n                method: \"PATCH\",\n                headers: this.headers,\n                body: JSON.stringify(entity)\n            }, options);\n            return this.fetchRequest(path, requestOptions);\n        });\n    }\n    delete(path, query) {\n        return __async(this, null, function*() {\n            const requestOptions = {\n                method: \"DELETE\",\n                headers: this.headers,\n                body: JSON.stringify(query)\n            };\n            return this.fetchRequest(path, requestOptions);\n        });\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/resend/dist/index.mjs\n");

/***/ })

};
;